<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 有道无术，尚可求；有术无道，止于术</title>
    <link>https://fusource.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 有道无术，尚可求；有术无道，止于术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 27 Jul 2023 11:53:18 +0800</lastBuildDate><atom:link href="https://fusource.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式：(行为型)迭代器模式</title>
      <link>https://fusource.github.io/posts/37.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 27 Jul 2023 11:53:18 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/37.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>迭代器原理： 迭代器模式（Iterator Pattern）是一种行为设计模式，它提供了一种顺序访问集合对象元素的方法，而不需要暴露集合对象的内</description>
    </item>
    
    <item>
      <title>设计模式：状态模式</title>
      <link>https://fusource.github.io/posts/36.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 26 Jul 2023 16:57:48 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/36.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid>
      <description>状态模式原理 状态模式是一种行为设计模式，它允许对象在内部状态发生变化时改变其行为。该模式将对象的行为封装在不同的状态类中，对象在不同的状态下</description>
    </item>
    
    <item>
      <title>设计模式：(行为型)职责链模式</title>
      <link>https://fusource.github.io/posts/35.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 26 Jul 2023 16:09:44 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/35.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>职责链模式原理 职责链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它允许多个对象依次处理同一个请求，直到其中一个对象能够处理为止</description>
    </item>
    
    <item>
      <title>设计模式:(行为型)策略模式</title>
      <link>https://fusource.github.io/posts/34.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 26 Jul 2023 15:30:28 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/34.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>策略模式原理 策略模式（Strategy Pattern）是一种行为型设计模式，它允许在运行时根据不同的情况选择不同的算法或行为。 策略模式的核心</description>
    </item>
    
    <item>
      <title>设计模式：(行为型)模板模式</title>
      <link>https://fusource.github.io/posts/33.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 26 Jul 2023 11:49:03 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/33.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</guid>
      <description>模板模式原理 模板模式是一种行为设计模式，它定义了一个操作中的算法的框架，将一些步骤延迟到子类中实现。模板模式使得子类可以在不改变算法结构的情</description>
    </item>
    
    <item>
      <title>设计模式：(行为型)观察者模式</title>
      <link>https://fusource.github.io/posts/32.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 26 Jul 2023 10:24:53 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/32.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>观察者模式原理 观察者模式（Observer Pattern）是一种行为型设计模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主</description>
    </item>
    
    <item>
      <title>设计模式：(结构型)享元模式</title>
      <link>https://fusource.github.io/posts/31.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 26 Jul 2023 09:48:18 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/31.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>享元模式原理 享元模式是一种结构型设计模式，它旨在有效地支持大量细粒度对象的共享。该模式通过共享对象的内部状态来减少内存使用和对象创建的开销。</description>
    </item>
    
    <item>
      <title>设计模式：(结构型)组合模式</title>
      <link>https://fusource.github.io/posts/30.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 25 Jul 2023 11:12:01 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/30.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
      <description>组合模式 组合模式是一种结构型设计模式，它允许我们将对象组合成树形结构以表示&amp;#34;部分-整体&amp;#34;的层次结构。组合模式使得客户端可以统</description>
    </item>
    
    <item>
      <title>设计模式：(结构型)适配器模式</title>
      <link>https://fusource.github.io/posts/29.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 25 Jul 2023 10:33:23 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/29.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>适配器模式 适配器模式（Adapter Pattern）是一种结构型设计模式，它用于将一个类的接口转换成客户端所期望的另一个接口。适配器模式使得</description>
    </item>
    
    <item>
      <title>设计模式：(结构型)门面模式</title>
      <link>https://fusource.github.io/posts/28.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 25 Jul 2023 09:39:29 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/28.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</guid>
      <description>门面模式 门面模式（Facade Pattern）是一种结构型设计模式，它提供了一个统一的接口，用于访问子系统中的一组接口。通过提供一个简化的接</description>
    </item>
    
    <item>
      <title>设计模式：(结构型)装饰器模式</title>
      <link>https://fusource.github.io/posts/27.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 25 Jul 2023 09:22:22 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/27.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>装饰器模式 装饰器模式是一种结构型设计模式，它允许在不改变对象接口的情况下，动态地向对象添加新的行为。 该模式通过创建一个装饰器类，该类包含一个</description>
    </item>
    
    <item>
      <title>设计模式：(结构型)桥接模式</title>
      <link>https://fusource.github.io/posts/26.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 15:45:01 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/26.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>桥接模式原理： 桥接模式是一种常见的设计模式，它可以将抽象部分与实现部分分离，使它们可以独立地变化。桥接模式通过将抽象部分和实现部分分别定义为</description>
    </item>
    
    <item>
      <title>设计模式：(结构型)代理模式</title>
      <link>https://fusource.github.io/posts/25.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 14:56:14 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/25.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9E%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>代理模式： 代理模式是一种常见的设计模式，它可以在不改变原有代码的情况下，为某个对象提供一个代理，以便控制对该对象的访问。代理模式通常用于需要</description>
    </item>
    
    <item>
      <title>设计模式：(创建型)原型模式</title>
      <link>https://fusource.github.io/posts/24.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 11:40:38 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/24.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>原型模式定义 原型模式（Prototype Pattern）是一种创建型设计模式，它允许通过克隆现有对象来创建新对象，而无需显式地使用构造函数。</description>
    </item>
    
    <item>
      <title>设计模式：(创建型)建造者模式</title>
      <link>https://fusource.github.io/posts/23.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 10:12:30 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/23.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>理论： 在建造者模式中，通常有以下几个角色： - Builder（建造者）：定义了构建对象的抽象接口，包含了构建对象的各个步骤。 - Concrete</description>
    </item>
    
    <item>
      <title>设计模式：(创建型)工厂模式</title>
      <link>https://fusource.github.io/posts/8.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 12 Jun 2023 10:11:55 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/8.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>1.简单工厂模式一： 大部分工厂类都是以&amp;quot;Factory&amp;quot;结尾，也不是必须，一般会结合语义场景来定义命名。有create开</description>
    </item>
    
    <item>
      <title>设计模式：(创建型)单例模式</title>
      <link>https://fusource.github.io/posts/6.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 24 May 2023 09:24:23 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/6.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 单例设计模式(Singleton Design Pattern):在应用作用域中，类只允许创建一个实例(对象) 如何实现一个单例？ 实现一个单例，需要关注</description>
    </item>
    
    <item>
      <title>设计模式：开篇</title>
      <link>https://fusource.github.io/posts/5.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BC%80%E7%AF%87/</link>
      <pubDate>Mon, 22 May 2023 11:26:49 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/5.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BC%80%E7%AF%87/</guid>
      <description>1. 从无到有 这个标题甚是抽象,也有点夸大其词了。初入代码这一行， 终究是以需求为导向，以实现功能为目标，以效率为评判标准。在过去相当一段时间里，</description>
    </item>
    
  </channel>
</rss>
