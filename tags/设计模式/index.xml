<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 有道无术，尚可求；有术无道，止于术</title>
    <link>https://fusource.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 有道无术，尚可求；有术无道，止于术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 24 Jul 2023 15:45:01 +0800</lastBuildDate><atom:link href="https://fusource.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>26.设计模式：桥接模式</title>
      <link>https://fusource.github.io/posts/26.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 15:45:01 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/26.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>桥接模式原理： 桥接模式是一种常见的设计模式，它可以将抽象部分与实现部分分离，使它们可以独立地变化。桥接模式通过将抽象部分和实现部分分别定义为</description>
    </item>
    
    <item>
      <title>25.设计模式：代理模式</title>
      <link>https://fusource.github.io/posts/25.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 14:56:14 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/25.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>代理模式： 代理模式是一种常见的设计模式，它可以在不改变原有代码的情况下，为某个对象提供一个代理，以便控制对该对象的访问。代理模式通常用于需要</description>
    </item>
    
    <item>
      <title>24.设计模式：原型模式</title>
      <link>https://fusource.github.io/posts/24.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 11:40:38 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/24.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>原型模式定义 原型模式（Prototype Pattern）是一种创建型设计模式，它允许通过克隆现有对象来创建新对象，而无需显式地使用构造函数。</description>
    </item>
    
    <item>
      <title>设计模式：建造者模式</title>
      <link>https://fusource.github.io/posts/23.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 24 Jul 2023 10:12:30 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/23.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>理论： 在建造者模式中，通常有以下几个角色： - Builder（建造者）：定义了构建对象的抽象接口，包含了构建对象的各个步骤。 - Concrete</description>
    </item>
    
    <item>
      <title>设计模式：工厂模式</title>
      <link>https://fusource.github.io/posts/8.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 12 Jun 2023 10:11:55 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/8.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>1.简单工厂模式一： 大部分工厂类都是以&amp;quot;Factory&amp;quot;结尾，也不是必须，一般会结合语义场景来定义命名。有create开</description>
    </item>
    
    <item>
      <title>设计模式：单例模式</title>
      <link>https://fusource.github.io/posts/6.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 24 May 2023 09:24:23 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/6.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 单例设计模式(Singleton Design Pattern):在应用作用域中，类只允许创建一个实例(对象) 如何实现一个单例？ 实现一个单例，需要关注</description>
    </item>
    
    <item>
      <title>设计模式：开篇</title>
      <link>https://fusource.github.io/posts/5.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BC%80%E7%AF%87/</link>
      <pubDate>Mon, 22 May 2023 11:26:49 +0800</pubDate>
      
      <guid>https://fusource.github.io/posts/5.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BC%80%E7%AF%87/</guid>
      <description>1. 从无到有 这个标题甚是抽象,也有点夸大其词了。初入代码这一行， 终究是以需求为导向，以实现功能为目标，以效率为评判标准。在过去相当一段时间里，</description>
    </item>
    
  </channel>
</rss>
